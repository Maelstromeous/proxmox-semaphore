---
- name: SSH Hardening for Debian/Ubuntu systems
  hosts: all
  become: true
  gather_facts: true
  strategy: free              # <-- hosts don't wait for each other
  any_errors_fatal: false

  vars:
    sshd_config_path: /etc/ssh/sshd_config
    sshd_config_backup: /etc/ssh/sshd_config.bak

  pre_tasks:
    - name: Skip unreachable hosts early
      ansible.builtin.ping:
      register: ping_result
      ignore_errors: true

    - name: Remove host from play if unreachable
      ansible.builtin.meta: end_host
      when: ping_result is failed

  tasks:
    - name: Ensure openssh-server is installed (tolerant of dpkg locks)
      ansible.builtin.apt:
        name: openssh-server
        state: present
        update_cache: true
        cache_valid_time: 3600
        force_apt_get: true
        lock_timeout: 120
      environment:
        DEBIAN_FRONTEND: noninteractive
      tags: [ssh, install]
      # Optional safety net if apt sometimes hangs longer than you'd like:
      # async: 600
      # poll: 10

    - name: Backup current sshd_config (if it exists)
        # copy fails if src missing unless remote_src + 'when' check
      ansible.builtin.copy:
        src: "{{ sshd_config_path }}"
        dest: "{{ sshd_config_backup }}"
        remote_src: true
        mode: '0600'
      when: sshd_config_path is file
      tags: [ssh, backup]

    - name: Disable root password login
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_path }}"
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'
        state: present
        create: false
        backrefs: false
      notify: Restart SSH
      tags: [ssh, harden]

    - name: Disable password authentication globally
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_path }}"
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present
      notify: Restart SSH
      tags: [ssh, harden]

    - name: Disable challenge-response authentication
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_path }}"
        regexp: '^#?ChallengeResponseAuthentication'
        line: 'ChallengeResponseAuthentication no'
        state: present
      notify: Restart SSH
      tags: [ssh, harden]

    - name: Enforce public key authentication
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_path }}"
        regexp: '^#?PubkeyAuthentication'
        line: 'PubkeyAuthentication yes'
        state: present
      notify: Restart SSH
      tags: [ssh, harden]

    - name: Disable empty passwords
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_path }}"
        regexp: '^#?PermitEmptyPasswords'
        line: 'PermitEmptyPasswords no'
        state: present
      notify: Restart SSH
      tags: [ssh, harden]

    - name: Limit SSH to IPv4 only (optional)
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_path }}"
        regexp: '^#?AddressFamily'
        line: 'AddressFamily inet'
        state: present
      notify: Restart SSH
      tags: [ssh, optional]

    - name: Set login grace time (prevents brute force)
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_path }}"
        regexp: '^#?LoginGraceTime'
        line: 'LoginGraceTime 30'
        state: present
      notify: Restart SSH
      tags: [ssh, optional]

    - name: Limit max authentication tries
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_path }}"
        regexp: '^#?MaxAuthTries'
        line: 'MaxAuthTries 3'
        state: present
      notify: Restart SSH
      tags: [ssh, optional]

    - name: Set client alive intervals to disconnect idle sessions
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_path }}"
        regexp: '^#?ClientAliveInterval'
        line: 'ClientAliveInterval 300'
        state: present
      notify: Restart SSH
      tags: [ssh, optional]

    - name: Set max client alive count
      ansible.builtin.lineinfile:
        path: "{{ sshd_config_path }}"
        regexp: '^#?ClientAliveCountMax'
        line: 'ClientAliveCountMax 2'
        state: present
      notify: Restart SSH
      tags: [ssh, optional]

  handlers:
    - name: Restart SSH
      ansible.builtin.service:
        name: ssh        # Debian/Ubuntu service name
        state: restarted
        enabled: true